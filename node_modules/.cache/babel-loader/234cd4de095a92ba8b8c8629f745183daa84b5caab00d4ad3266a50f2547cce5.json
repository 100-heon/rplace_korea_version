{"ast":null,"code":"var _jsxFileName = \"/Users/100_heon/Desktop/Rspace/rplace/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { SketchPicker } from 'react-color';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:4000');\nfunction App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [currentColor, setCurrentColor] = useState(\"#000000\");\n  const [selectedPixel, setSelectedPixel] = useState(null);\n  useEffect(() => {\n    socket.on('initial_board', board => {\n      setBoard(board);\n    });\n    socket.on('change_color', data => {\n      setBoard(prevBoard => {\n        const {\n          x,\n          y,\n          color\n        } = data;\n        const newBoard = [...prevBoard];\n        newBoard[y][x] = color;\n        return newBoard;\n      });\n    });\n  }, []);\n  const changeColor = (x, y) => {\n    setSelectedPixel({\n      x,\n      y\n    });\n  };\n  const handleColorChange = color => {\n    setCurrentColor(color.hex);\n    if (selectedPixel) {\n      const {\n        x,\n        y\n      } = selectedPixel;\n      socket.emit('change_color', {\n        x,\n        y,\n        color: color.hex\n      });\n      setSelectedPixel(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD53D\\uC140\\uC744 \\uD074\\uB9AD\\uD558\\uC5EC \\uC0C9\\uC0C1 \\uC120\\uD0DD\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SketchPicker, {\n      color: currentColor,\n      onChangeComplete: handleColorChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row'\n      },\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex'\n        },\n        children: row.map((color, x) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => changeColor(x, y),\n          style: {\n            width: '20px',\n            height: '20px',\n            backgroundColor: color,\n            border: '1px solid black'\n          }\n        }, x, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this))\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"6QZtz0sN4pJ2oq7t50pAQvvIMWQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","SketchPicker","jsxDEV","_jsxDEV","socket","App","_s","board","setBoard","currentColor","setCurrentColor","selectedPixel","setSelectedPixel","on","data","prevBoard","x","y","color","newBoard","changeColor","handleColorChange","hex","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChangeComplete","style","display","flexWrap","flexDirection","map","row","onClick","width","height","backgroundColor","border","_c","$RefreshReg$"],"sources":["/Users/100_heon/Desktop/Rspace/rplace/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { SketchPicker } from 'react-color';\nimport './App.css';\n\nconst socket = io('http://localhost:4000');\n\nfunction App() {\n    const [board, setBoard] = useState([]);\n    const [currentColor, setCurrentColor] = useState(\"#000000\");\n    const [selectedPixel, setSelectedPixel] = useState(null);\n\n    useEffect(() => {\n        socket.on('initial_board', board => {\n            setBoard(board);\n        });\n\n        socket.on('change_color', data => {\n            setBoard(prevBoard => {\n                const { x, y, color } = data;\n                const newBoard = [...prevBoard];\n                newBoard[y][x] = color;\n                return newBoard;\n            });\n        });\n\n    }, []);\n\n    const changeColor = (x, y) => {\n        setSelectedPixel({ x, y });\n    };\n\n    const handleColorChange = (color) => {\n        setCurrentColor(color.hex);\n        if (selectedPixel) {\n            const { x, y } = selectedPixel;\n            socket.emit('change_color', { x, y, color: color.hex });\n            setSelectedPixel(null);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>픽셀을 클릭하여 색상 선택하기</h1>\n            <SketchPicker color={currentColor} onChangeComplete={handleColorChange} />\n            <div style={{ display: 'flex', flexWrap: 'wrap', flexDirection: 'row' }}>\n                {board.map((row, y) => (\n                    <div key={y} style={{ display: 'flex' }}>\n                        {row.map((color, x) => (\n                            <div key={x} onClick={() => changeColor(x, y)} \n                                 style={{ width: '20px', height: '20px', backgroundColor: color, border: '1px solid black' }} />\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}